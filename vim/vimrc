" Indentation
" ===========

" Reset indentation options
set nosmartindent
set nocindent
set indentexpr=

" Copy indentation from the previous line
set nocopyindent     " disable dummy 'copy-and-leave-as-is' algorithm
set autoindent       " enable algorithm that clears empty lines
set nopreserveindent " do not copy tab/space structure from previous line

" Use spaces instead of tabs
set expandtab

" Use 4-space indentation
set shiftwidth=4  " number of spaces for each (auto)indent
set softtabstop=4 " number of spaces inserted on each tab-key hit
" See also 'tabstop' option in the 'Display' section.

" Round indent to multiple of shiftwidth for '<' and '>' commands
set shiftround


" Editing text
" ============

" Allow backspace through indentation, back to previous line (join lines),
" before the start of the insert
set backspace=indent,eol,start

" Handle comments and bullet lists while auto-formatting (gq).
" These settings are meant to be used in the ordinary text files. They could
" be overridden for individual code languages.
"
" /*
"  * multi-line C comments
"  * break line repeating '*'
"  */
"
" // C comments
" // break line repeating '//'
"
" % LaTeX comments
" % break line repeating '%'
"
" > mail quotes
" > > keep level while
" > > breaking lines
"
" - unordered dash list
"   do not repeat '-' sign
"
" * unordered asterisk list
"   do not repeat '*' sign
"
" # unordered hash list
"   do not repeat '#' sign
set comments=s1:/*,mb:*,ex:*/,://,:%,n:>,fb:-,fb:*,fb:#


" How auto-formatter (gq) behaves:
" t - auto-wrap text using textwidth
" c - auto-wrap comments using textwidth (see 'comments' option)
" q - allow formatting comments
" 1 - do not break a line after a
"     one-letter word
" j - join comment lines when applicable
set formatoptions=tcq1j

" Do not insert double spaces.  After a period.
set nojoinspaces

" Use 78-char line width for any unknown file type
set textwidth=78
autocmd FileType * set textwidth=0

" Show autocompletion as a menu
set completeopt=menu

" Trigger autocompletion on Ctrl+Space
inoremap <expr> <C-Space> pumvisible() \|\| &omnifunc == '' ?
\ "\<lt>C-n>" :
\ "\<lt>C-x>\<lt>C-o><c-r>=pumvisible() ?" .
\ "\"\\<lt>c-n>\\<lt>c-p>\\<lt>c-n>\" :" .
\ "\" \\<lt>bs>\\<lt>C-n>\"\<CR>"
imap <C-@> <C-Space>


" Display
" =======

" Display single tab as 8 spaces
set tabstop=8

" Assume plain text file by default (no highlighting)
set fenc=
" But just when file type is known, enable highlighting
syntax on

" Do not highlight found search terms by default
set nohlsearch
nohlsearch

" Show matching pattern while typing search term
set incsearch

" Show line and column number
set ruler
" Show incomplete command while typing
set showcmd
" Show editor mode
set showmode
" Show statusline even for a single window
set laststatus=2

" Statusline content
" %n - buffer number
" %y - [file type]
" %< - (truncate from here to the right if a line is too long
"      - usually file name is more interesting than file path)
" %f - file name and its path relative to current directory
" %h - [Help] flag, if this is help window
" %m - [+] modified flag or [-] modification disabled flag
" %r - [RO] readonly flag
" %= - (separation between left and right statusline side)
" %-14.( - justify left (-), minimum 14 characters long, maximum unbounded (14.)
"   %l - line number
"   %c - column number
"   %V - virtual column number (byte number) if different than column number
" %) -
" %P - percentage through file (of displayed window, not of current line)
set statusline=%n\ %y\ %<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P

" Do not make all windows the same size after splitting or closing window
set noequalalways

" Show whitespace at the end of a line, but do not show extra whitespace while
" editing line
augroup colors_extrawhitespce
    autocmd!
    autocmd BufEnter            *   match ExtraWhitespace /\s\+$/
    autocmd InsertEnter         *   match ExtraWhitespace /\s\+\%#\@<!$/
    autocmd InsertLeave         *   match ExtraWhiteSpace /\s\+$/
augroup END

" Highlight cursor line
set cursorline

" Highlight 80-column margin
set colorcolumn=79,80

" Use polish and english dictionaries for spell checking
set spelllang=pl,en

"" Enable spell checking for any unknown filetype
set spell
autocmd FileType * setlocal nospell

" Correct highting in XML documents. Check spelling outside syntax items.
syntax spell toplevel

" Do not highlight uncapitalized first word after a period. like here
set spellcapcheck=


" Mouse
" =====

" Scroll with a mouse wheel
source ~/.vim/ez_scroll_mid.vim


" Colors
" ======

" There settings are in use only when specific highlight is enabled
highlight ExtraWhitespace               ctermbg=red
highlight CursorLine        cterm=NONE  ctermbg=234                 guibg=lightgrey
highlight CursorColumn      cterm=NONE  ctermbg=234                 guibg=lightgrey
highlight ColorColumn       cterm=NONE  ctermbg=234                 guibg=lightgrey
highlight PmenuSel                      ctermbg=green
highlight SpellBad                      ctermbg=red
highlight Search            cterm=NONE  ctermbg=58

" File handling
" =============

" Try reading file as latin2 if utf8 failed
set fileencodings=utf8,latin2

" Do not create permanent backup file
set nobackup
" Use temporary backup file during overwriting existing file
set writebackup


" Filetype specific settings
" ==========================

" Python
" ------
augroup filetype_python
    autocmd!

    " Indent line after python keywords
    autocmd FileType python     setlocal smartindent
    autocmd FileType python     setlocal cinwords=if,elif,else,for,while,try,except,finally,def,class

    " Remove trailing whitespace before writing a file
    autocmd BufWritePre *.py    1,$s/\s\+$//e
augroup END

" Makefile
" --------
augroup filetype_make
    autocmd!

    " Do not replace tabs with spaces
    autocmd FileType make               setlocal noexpandtab

    " Use 8 character indentation
    autocmd FileType make               setlocal shiftwidth=8
    autocmd FileType make               setlocal softtabstop=8
augroup END


" Markdown
" --------
augroup filetype_markdown
    autocmd!

    autocmd FileType markdown    setlocal nocursorline
    autocmd FileType markdown    setlocal colorcolumn=
    autocmd FileType markdown    setlocal spell
    autocmd FileType markdown    setlocal textwidth=78
augroup END

" Vim help
" --------
augroup filetype_help
    autocmd!

    autocmd FileType help        setlocal nocursorline
    autocmd FileType help        setlocal colorcolumn=
augroup END

" Git commit
" ----------
augroup filetype_gitcommit
    autocmd!

    autocmd FileType gitcommit   setlocal spell
    autocmd FileType gitcommit   setlocal textwidth=78
augroup END

" Mail
" ----
augroup filetype_mail
    autocmd!

    autocmd FileType mail   setlocal spell
    autocmd FileType mail   setlocal textwidth=78
augroup END

" reStructuredText
" ----
augroup filetype_rst
    autocmd!

    autocmd FileType rst   setlocal spell
    autocmd FileType rst   setlocal textwidth=78
augroup END

" Plain text
" ----
augroup filetype_txt
    autocmd!

    autocmd FileType txt   setlocal spell
    autocmd FileType txt   setlocal textwidth=78
augroup END

" Jinja2 templates
" ----
augroup filetype_jinja2
    autocmd!

    autocmd BufEnter,BufNew *.j2 setlocal textwidth=0
augroup END

" LaTeX files
" ----
augroup filetype_tex
    autocmd!

    autocmd FileType tex   setlocal spell
    autocmd FileType tex   setlocal textwidth=78
augroup END

" Ruby
" ----
augroup filetype_ruby
    autocmd!

    autocmd FileType ruby       setlocal tabstop=2
    autocmd FileType ruby       setlocal shiftwidth=2
    autocmd FileType ruby       setlocal softtabstop=2
    autocmd FileType eruby      setlocal tabstop=2
    autocmd FileType eruby      setlocal shiftwidth=2
    autocmd FileType eruby      setlocal softtabstop=2
augroup END

" personal settings, not included in the repository
if filereadable("~/.vim/personal.vim")
    source ~/.vim/personal.vim
endif

augroup yaml
    autocmd FileType yaml      setlocal tabstop=2
    autocmd FileType yaml      setlocal shiftwidth=2
    autocmd FileType yaml      setlocal softtabstop=2
augroup END

augroup html
    autocmd FileType html       setlocal tabstop=2
    autocmd FileType html       setlocal shiftwidth=2
    autocmd FileType html       setlocal softtabstop=2
augroup END

" http://learnvimscriptthehardway.stevelosh.com/

"echo '>^.^<'
nnoremap - ddp
nnoremap _ ddkP
inoremap <c-u> <esc>viwUea
nnoremap <c-u> viwUe

" leader
let mapleader="\<Space>"
" fast clipboard access
vmap <Leader>y "+y
vmap <Leader>d "+d
vmap <Leader>p "+p
vmap <Leader>P "+P
nmap <Leader>p "+p
nmap <Leader>P "+P

" neobundle
if has('vim_starting')
  if &compatible
    set nocompatible               " Be iMproved
  endif

  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!
NeoBundle 'terryma/vim-expand-region'
NeoBundle 'chase/vim-ansible-yaml'

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

" vim-expand-region
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
let g:expand_region_text_objects = {
      \ 'iw'  :0,
      \ 'iW'  :0,
      \ 'i"'  :0,
      \ 'i''' :0,
      \ 'i]'  :1,
      \ 'ib'  :1,
      \ 'iB'  :1,
      \ 'il'  :0,
      \ 'is'  :0,
      \ 'ip'  :0,
      \ 'ie'  :0,
      \ }


" vp doesn't replace paste buffer
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

source ~/.vim/ez_scroll_mid.vim

